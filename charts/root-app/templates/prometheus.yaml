apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: prometheus
  finalizers:
  - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    chart: prometheus
    targetRevision: 25.3.1
    helm:
      valuesObject:
        pushgateway:
          enabled: false
        autoscaling:
          enabled: true
          maxReplicas: 5
          minReplicas: 2
          targetCPU: '60'
        datasources:
          datasources.yaml:
            apiVersion: 1
            datasources:
              - jsonData:
                  httpHeaderName1: X-Scope-OrgID
                name: Loki
                secureJsonData:
                  httpHeaderValue1: standard
                type: loki
                url: >-
                  http://loki-loki-distributed-gateway.loki.svc.cluster.local:443
              - jsonData:
                  httpHeaderName1: X-Scope-OrgID
                name: Loki-legacy
                secureJsonData:
                  httpHeaderValue1: fake
                type: loki
                url: >-
                  http://loki-loki-distributed-gateway.loki.svc.cluster.local:443
              - jsonData:
                  httpHeaderName1: X-Scope-OrgID
                name: Loki-restricted
                secureJsonData:
                  httpHeaderValue1: restricted
                type: loki
                url: >-
                  http://loki-loki-distributed-gateway.loki.svc.cluster.local:443
              - access: proxy
                name: Tempo
                type: tempo
                url: 'http://tempo-query-frontend.tempo.svc.cluster.local:3100'
              - isDefault: true
                jsonData:
                  cacheLevel: High
                  incrementalQuerying: true
                  prometheusType: Mimir
                name: Mimir
                type: prometheus
                url: 'http://mimir-nginx.mimir.svc.cluster.local:443/prometheus'
              - access: server
                jsonData:
                  handleGrafanaManagedAlerts: true
                  implementation: mimir
                name: Mimir - Alertmanager
                type: alertmanager
                url: 'http://mimir-nginx.mimir.svc.cluster.local:443'
              - access: server
                jsonData:
                  implementation: prometheus
                name: Corporate - Alertmanager
                type: alertmanager
                url: 'http://alertmanager-operated.monitoring.svc.cluster.local:9093'
        envFromSecret: grafana-credentials
        grafana.ini:
          auth:
            disable_login_form: false
          auth.okta:
            allow_assign_grafana_admin: true
            allow_signup: false
            api_url: 'https://traderepublic.okta.com/oauth2/v1/userinfo'
            auth_url: 'https://traderepublic.okta.com/oauth2/v1/authorize'
            client_id: 0oa7zpw95tG8rlDLW417
            enabled: true
            icon: okta
            name: Okta
            role_attribute_path: >-
              {{ range $.Values.roleMapping }}contains(groups[*], '{{ .group
              }}') && '{{ .role }}' || {{ end }}'Viewer'
            scopes: openid profile email groups
            token_url: 'https://traderepublic.okta.com/oauth2/v1/token'
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
